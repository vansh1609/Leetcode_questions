class LRUCache {

private Map<Integer,Node> map=new HashMap<>();
private Node head;
private Node tail;
private int capacity;

public LRUCache(int capacity) {
    this.capacity=capacity;
    head=new Node(0,0);
    tail=new Node(0,0);
    head.next=tail;
    tail.prev=head;
}

public int get(int key) {
    Node val=map.get(key);
    if(val==null)return -1;
    
    remove(val);
    insert(val);
    return val.val;
    
}

public void put(int key, int value) {
    if(map.containsKey(key))
    {
        remove(map.get(key));
    }
    if(map.size()==capacity)
    {
        remove(tail.prev);
    }
    insert(new Node(key,value));
}

private void remove(Node node)
{
    map.remove(node.key);
    node.prev.next=node.next;
    node.next.prev=node.prev;
}

private void insert(Node node)
{
    map.put(node.key,node);
    head.next.prev=node;
    node.prev=head;
    node.next=head.next;
    head.next=node;
}
}

class Node
{
Node prev;
Node next;
int key;
int val;

Node(int key,int val)
{
    this.key=key;
    this.val=val;
}
}
