class Solution {
public:
    int solve(int i,int j,int moves,int m,int n,vector<vector<vector<int>>> &v)
    {
        if(i<0 || i>=m || j<0 || j>=n)
        {
            if(moves>=0)
            return 1;
            return 0;
        }
        if(moves<0)
        return 0;
        if(v[i][j][moves]!=-1)
        return v[i][j][moves];
        int up=solve(i-1,j,moves-1,m,n,v);
        int down=solve(i+1,j,moves-1,m,n,v);
        int left=solve(i,j-1,moves-1,m,n,v);
        int right=solve(i,j+1,moves-1,m,n,v);
        return v[i][j][moves]=(((up%1000000007 +down%1000000007)%1000000007 +left%1000000007)%1000000007+right%1000000007)%1000000007;
    }
    int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        vector<vector<vector<int>>> v(m+1,vector<vector<int>>(n+1,vector<int>(maxMove+1,-1)));
        return solve(startRow,startColumn,maxMove,m,n,v);
        int count=0;
        queue<pair<int,pair<int,int>>> q;
        q.push({0,{startRow,startColumn}});
        while(!q.empty())
        {
            int r=q.front().second.first;
            int c=q.front().second.second;
            int dist=q.front().first;
            q.pop();
            if((r<0 || c<0 || r>=m || c>=n) && dist<=maxMove){
                // cout<<r<<" "<<c<<" "<<dist<<endl;
            count=(count%1000000007+1%1000000007)%1000000007;
            continue;
            }
            if(dist>maxMove)
            continue;
            int x[]={-1,1,0,0};
            int y[]={0,0,1,-1};
            for(int i=0;i<4;i++)
            {
                int nr=r+x[i];
                int nc=c+y[i];
                if((dist+1)<=maxMove)
                q.push({dist+1,{nr,nc}});
            }
        }
        return count;
    }
};
