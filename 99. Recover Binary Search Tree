/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void inorder(TreeNode *root,vector<TreeNode*> &v)
    {
        if(root)
        {
            inorder(root->left,v);
            v.push_back(root);
            inorder(root->right,v);
        }
    }
    // TreeNode* search(TreeNode *root,int x)
    // {
    //     if(root==NULL)
    //         return NULL;
    //     while(root){
    //     if(root->val==x)
    //     {
    //         return root;
    //     }
    //         else if(x>root->val)
    //             root=root->right;
    //         else
    //             root=root->left;
    //     }
    //     return root;
    // }
    void recoverTree(TreeNode* root) {
        vector<TreeNode*> v;
        int x,y;
        inorder(root,v);
        for(int i=0;i<v.size()-1;i++)
        {
            for(int j=i+1;j<v.size();j++)
            {
                if(v[j]->val<v[i]->val)
                {
                    int temp=v[j]->val;
                    v[j]->val=v[i]->val;
                    v[i]->val=temp;
                }
            }
        }
        
       
        
        
        
    }
};
