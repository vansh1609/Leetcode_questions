class Solution {
public:
    void dfs(int i,int j,vector<vector<int>> &grid)
    {
        grid[i][j]=1;
        int r[]={-1,1,0,0};
        int c[]={0,0,1,-1};
        for(int k=0;k<4;k++)
        {
            int nr=i+r[k];
            int nc=j+c[k];
            if(nr>=0 && nc>=0 && nr<grid.size() && nc<grid[0].size() && grid[nr][nc]==0)
            dfs(nr,nc,grid);
        }
    }
    int closedIsland(vector<vector<int>>& grid) {
        int n=grid.size(),m=grid[0].size();
        for(int i=0;i<n;i++)
        {
            if(grid[i][0]==0)
            dfs(i,0,grid);
            if(grid[i][m-1]==0)
            dfs(i,m-1,grid);
        }
         for(int i=0;i<m;i++)
        {
            if(grid[0][i]==0)
            dfs(0,i,grid);
            if(grid[n-1][i]==0)
            dfs(n-1,i,grid);
        }
        int count=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==0){
                dfs(i,j,grid);
                count++;
                }
            }
        }
        return count;
    }
};
