/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sum(TreeNode *root)
    {
        if(root==NULL)
            return 0;
        return root->val+sum(root->left)+sum(root->right);
    }
    int count(TreeNode *root)
    {
     
        if(root==NULL)
            return 0;
        return 1+count(root->left)+count(root->right);
    
    }
    void inorder(TreeNode *root,vector<TreeNode *> &v)
    {
        if(root)
        {
            inorder(root->left,v);
            v.push_back(root);
            inorder(root->right,v);
        }
    }
    int averageOfSubtree(TreeNode* root) {
        vector<TreeNode*> v;
        int c=0;
        inorder(root,v);
        for(int i=0;i<v.size();i++)
        {
            if(v[i]->val==(sum(v[i])/count(v[i])))
                c++;
                
        }
        return c;
    }
};
